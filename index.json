[{"categories":null,"contents":"Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.\nNo se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html\nEstablecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.\nEsta implementación utiliza Fusejs, jquery y mark.js\nConfiguración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.toml\n``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nBúsqueda de archivos adicionales Para buscar campos adicionales definidos en el front matter, debes añadirlo en 2 lugares.\nEditar layouts/_default/index.JSON Esto expone los valores en /index.json: por ejemplo, para agregar categories ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEditar las opciones de fuse.js para buscar static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/search/","summary":"Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.\nNo se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html\nEstablecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.\nEsta implementación utiliza Fusejs, jquery y mark.js\nConfiguración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.","tags":null,"title":"Resultados de Búsqueda"},{"categories":null,"contents":"Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.\nNo se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html\nEstablecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.\nEsta implementación utiliza Fusejs, jquery y mark.js\nConfiguración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.toml\n``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nBúsqueda de archivos adicionales Para buscar campos adicionales definidos en el front matter, debes añadirlo en 2 lugares.\nEditar layouts/_default/index.JSON Esto expone los valores en /index.json: por ejemplo, para agregar categories ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEditar las opciones de fuse.js para buscar static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/search/","summary":"Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.\nNo se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html\nEstablecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.\nEsta implementación utiliza Fusejs, jquery y mark.js\nConfiguración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.","tags":null,"title":"Resultados de Búsqueda"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"অনুসন্ধানের ফলাফল"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"অনুসন্ধানের ফলাফল"},{"categories":null,"contents":"GW2 Market Analysis GW2 Market Analysis is a server hosted webpage developed in Java with Spring Boot. The plots are made with Plotly.js with the time series data being scraped from the GW2 API twice daily by a systemd timer service.\nIt offers information such as the buy price spread and a depth chart, together with historial data of price and supply demand fluctuations, allowing you to make informed investment decisions.\n","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/projects/bltcanalysis/","summary":"GW2 Market Analysis GW2 Market Analysis is a server hosted webpage developed in Java with Spring Boot. The plots are made with Plotly.js with the time series data being scraped from the GW2 API twice daily by a systemd timer service.\nIt offers information such as the buy price spread and a depth chart, together with historial data of price and supply demand fluctuations, allowing you to make informed investment decisions.","tags":null,"title":""},{"categories":null,"contents":"CS50 Introduction to Artificial Intelligence with Python I took an online course by Harvard which explored the concepts and algorithms at the foundation of modern artificial intelligence.\nThe course featured a number of projects covering topics such as:\nUtilizing search algorithms such as depth first search and breadth first search to solve basic problems and a minimax algorithm with alpha-beta pruning to play tic-tac-toe. Implementing logic to maintain a knowledge base to tackle logic problems and write a minesweeper AI. Make use of probability rules and distributions to implement a page rank algorithm by sampling and iteration, as well as determine the probability of inheriting and expressing a gene based on a family tree and some known information about the gene. Implementing a constraint satisfaction algorithm to assign words to a crossword using inference. Trained a neural network to predict how shopper behaviours influence the probability of them making a purchase and used reinforcement learning with Q-learning to teach an AI to play Nim. Trained a CNN to identify signs using the GTSRB dataset. created a parser using the Python NLTK toolkit to parse sentences using context free grammar, and wrote an AI to answer questions using a corpus of information pulled from Wikipedia using tokenization and tf-idf to identify sentences which best fit the query. By completing these projects and a number of quizzes, I earned a certificate showing my completion of the course.\nBack to Home ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/projects/cs50ai/","summary":"CS50 Introduction to Artificial Intelligence with Python I took an online course by Harvard which explored the concepts and algorithms at the foundation of modern artificial intelligence.\nThe course featured a number of projects covering topics such as:\nUtilizing search algorithms such as depth first search and breadth first search to solve basic problems and a minimax algorithm with alpha-beta pruning to play tic-tac-toe. Implementing logic to maintain a knowledge base to tackle logic problems and write a minesweeper AI.","tags":null,"title":""},{"categories":null,"contents":"Parameterization Study of The Efficiency of a Piezoelectric Flutter Based Harvester The aeroelastic phenomenon of flutter is an interesting one. Often undesirable as it results in material deformation and fatigue, sometimes even catastrophic failure, these same deformations are also indicative of work being done by the flow. Using piezoelectrics it is then possible that perhaps we could tap on this phenomenon as an alternative means of extracting flow energy.\nAs a year one student however, flutter was something that was still beyond my understanding. Recognising this, my mentor instructed me in performing a mathematical simulation of how the degree of flutter would vary with the size and material properties of the wing. This would be my first experience working with MATLAB and drawing conclusions from the complex maps resulting from the simulations. To supplement my theoretical knowledge, I was tasked to design an experiment to investigate how these same parameters, as well as some others would affect the observation of flutter in reality.\nOver the next few weeks, I would build and test sample after sample in the low speed wind tunnel at NTU, using a piezoelectric stem and an oscilloscope to quantitively measure the degree of flutter observed. I tested a number of shapes, stiffness and weight distributions tested in other studies, as well as parameters suggested by my mentor and managed to obtain similar trends to other experiments, as well as the theory.\nWhile my project might not have led to any new insights in the field, it taught me, as a fresh year one university student, valuable skills pertaining to experimental design and report writing, and gave me a better understanding of this intriguing phenomenon.\nThe report can be downloaded [here](\\assets\\downloadable\\Parameterization Study of The Efficiency of a Piezoelectric Flutter Based Harvester.pdf), and a poster summarizing the experimental design and results can be found [here](\\assets\\downloadable\\Parameterization Study of The Efficiency of a Piezoelectric Flutter Based Harvester Poster.pdf)\nBack to Home ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/projects/cy1400/","summary":"Parameterization Study of The Efficiency of a Piezoelectric Flutter Based Harvester The aeroelastic phenomenon of flutter is an interesting one. Often undesirable as it results in material deformation and fatigue, sometimes even catastrophic failure, these same deformations are also indicative of work being done by the flow. Using piezoelectrics it is then possible that perhaps we could tap on this phenomenon as an alternative means of extracting flow energy.\nAs a year one student however, flutter was something that was still beyond my understanding.","tags":null,"title":""},{"categories":null,"contents":"Subjective Testing Of Parametrically-decoded First-Order Ambisonics In Cinematically-reproduced Virtual Reality In my second year at NTU, I secured a research attachment at the Digital Signal Processing Laboratory at NTU where they were researching the use of Virtual Reality technologies for use in soundscape design. In particular, the project I worked on focused on evaluating the suitability of various audio decoding methods for use with such technologies using subjective testing.\nDuring my time there I learnt about the motivations behind the project, and also picked up some technical skills. In preparing the recordings for the experiments, I worked with a digital audio workstation as well as tools used to sync the 360 degree video with the sound recording, in order to achieve audio-visual congruency. I had the opportunity to conduct the experiment as well, allowing me to practice interviewing the tester while they interacted with the recordings. Finally, I worked with IBM\u0026rsquo;s Statistical Package for Social Sciences (SPSS) as well as the R project for statistical computing to interpret the data as well as produce plots for the report.\nBack to Home ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/projects/cy2001/","summary":"Subjective Testing Of Parametrically-decoded First-Order Ambisonics In Cinematically-reproduced Virtual Reality In my second year at NTU, I secured a research attachment at the Digital Signal Processing Laboratory at NTU where they were researching the use of Virtual Reality technologies for use in soundscape design. In particular, the project I worked on focused on evaluating the suitability of various audio decoding methods for use with such technologies using subjective testing.\nDuring my time there I learnt about the motivations behind the project, and also picked up some technical skills.","tags":null,"title":""},{"categories":null,"contents":"Inverse Kinematics solver using deep learning While exploring inverse kinematics for the control of robotic arms, I came across an article on MATLAB about using their adaptive neuro-fuzzy inference system (ANFIS) app to model a 2-joint robotic arm in a 2D space. The approach seemed like it could overcome the exponential increase in complexity with more complex systems, so I decided to give it a try using Tensorflow to train a model for the control of a 2-joint robotic arm in 3D space.\nThe data was generated in python using a forward kinematics solution to find all possible states of the arm for discrete intervals of the actuation of each joint, chosen to ensure a managable amount of data. The data was then processed by shuffling it and splitting the input, a position in catesian coordinates from the output, the required actuation from each joint. The first model I trained consisted of hidden dense layers with relu activation and a mean squared error loss function just to see how it would perform. The model was able to provide actuator commands for points within its reach with decent accuracy. However, it requested actuator commands greater than the limits present in the data, representing impossible demands, and was unable to produce meaningful output for objects out of its reach.\nTo solve some of these problems, I implemented a custom loss function to reduce the eucliean distance of the position calcuated from the angles produced by the model using forward kinematics to the desired input position. This allowed the model to better evaluate its solution by minimising the offset from the desired position rather than just comparing it to known solutions. In addition, I generated a more balanced dataset using a range of points in and around the reach of the arm. This reduced the model overfitting to positions with more solutions, as well as being unable to estimate a solution for points it could not reach, allowing the model to accurately generate angles for points it could reach and extend in the right direction for points out of reach.\nA simple webapp made with Threejs utilizing the trained model can be found at https://deep-arm.netlify.app/.\n","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/projects/deeparm/","summary":"Inverse Kinematics solver using deep learning While exploring inverse kinematics for the control of robotic arms, I came across an article on MATLAB about using their adaptive neuro-fuzzy inference system (ANFIS) app to model a 2-joint robotic arm in a 2D space. The approach seemed like it could overcome the exponential increase in complexity with more complex systems, so I decided to give it a try using Tensorflow to train a model for the control of a 2-joint robotic arm in 3D space.","tags":null,"title":""},{"categories":null,"contents":"Drone Simulator Orignally the project started out as a drone and physics simulator in Python. I started by simulating various aspects of a quadcopter, such as how an input voltage would drive the propellers, creating a thrust and torque, which would be applied to the quadcopter. To perform the simulation, I also had to write a physics simulation, building an update loop, gravity and ground collisions, alongside a visualisation and user interface. As I was tuning the altitude hold controller, I took a break and decided to make the switch to Unity.\nThe visualization and user interface were extremely crude in python, and was only implemented in the xy-plane. As I wanted to focus more on the dynamics and control systems behind the drone, I decided it would be best to switch to a solution with a pre-built physics and rending engine. I also had plans to learn Unity and its scripting language C#, so I decided it would be a good opportunity to do so.\nIt was slow going as I learnt the ropes of Unity, its objects and properties, as picking up the syntax of C#, which made me appreciate the numerical libraries and the understanding I had of the simulation I had built in Python. Eventually though, I managed to model the individual rotors and how an input from the controller would cause a net force and torque to be generated on the quadcopter. It was at this point that I really began to see the advantages of a 3rd party solution such as Unity.\nThe simulation broke down the drone into its various components, such as the rotors, main body, flight controller and sensors. The rotors generated a force and a torque based on its speed, determined by its intrinsic parameters as well as the throttle input from the flight controller. The flight controller supports mutltiple flight modes, which translate input controls into throttle commands. It includes a stabilized flight mode, which uses sensor data and PID controllers to adjust the throttles automatically based on the motor mixing algorithm. Each sensor has its own module, which simulates how the actual sensor works and returns measurements similar to the real sensor. The flight controller can choose which sensors to use and process them such as using an IMU to combine gyroscope and accelerometer readings to find the position and orientation of the body (on which the sensors are mounted). This can be combined with the altimeter data to get a better estimate of the height.\nBack to Home ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/projects/dronesimulator/","summary":"Drone Simulator Orignally the project started out as a drone and physics simulator in Python. I started by simulating various aspects of a quadcopter, such as how an input voltage would drive the propellers, creating a thrust and torque, which would be applied to the quadcopter. To perform the simulation, I also had to write a physics simulation, building an update loop, gravity and ground collisions, alongside a visualisation and user interface.","tags":null,"title":""},{"categories":null,"contents":"Guitar Companion The guitar companion is a collection of tools written in Python, utilizing PortAudio which visualizes and transforms audio input. It is so named as many of the transformations are based off guitar effects, with the user interface built to look like a pedalboard. The system worked by taking the real time audio input from a microphone, which could also be the output of an electric guitar, and progressively altering the signal across a number of modular effects, before returning it to the speaker.\nVisualization options included the time-amplitude plot of the transformed plot alongside the fourier domain frequency plot of the transformed signal and a frequency-time spectrogram. Transformation options included amplitude adjustment, equalization and modulation and frequency shifting.\nThe main learning points I obtained from this project was an insight into digital signal processing and some practical experience with the numerical operations that can be performed on digital signals, as well as how to handle real time buffer data.\nBack to Home ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/projects/eguitarmod/","summary":"Guitar Companion The guitar companion is a collection of tools written in Python, utilizing PortAudio which visualizes and transforms audio input. It is so named as many of the transformations are based off guitar effects, with the user interface built to look like a pedalboard. The system worked by taking the real time audio input from a microphone, which could also be the output of an electric guitar, and progressively altering the signal across a number of modular effects, before returning it to the speaker.","tags":null,"title":""},{"categories":null,"contents":"Unique Flight Controller for a Multirotor For my Final Year Project (FYP) for my Aerospace Engineering degree with NTU, I designed and built a novel UAV concept for drone based delivery. The prototype I built for the project was able to perform a short hover with attitude control. While I am unable to share the details of the design at the current moment as the research is still ongoing, I shall share the work I did for the project.\nTo begin with, I created multiple Simulink models with varying levels of complexity to explore how the controller would behave before implementing it. The simulations ranged from a standard model for a quadcopter, followed by a custom model coupled with adjustable parameters and smaller models for testing individual degrees of freedom for the body and their respective controllers. I experimented with theoretical and experimental models for determining the thrust produced at various control outputs. I also tested the model\u0026rsquo;s sensitivity to sensor noise by adjusting how the level of noise introduced in the feedback loop influenced the response of the system. I tested the differences between a continuous model and different sample rates to examine how a discrete controller would perform on the actual hardware which influenced the design of the final controller.\nThe physical platform for testing was designed in Solidworks combined with downloaded models of typical components like the motor for sizing and designing of fits. The parts were 3D printed, and combined with carbon fibre rods for structure. The microcontroller used was an Arduino Nano BLE Sense 33 because of the in-built IMU and Bluetooth low energy (BLE) chip which could be used for communications.\nThe actual flight control software was developed from scratch, taking reference to opensource flight controllers like MultiWii and PixHawk4.\nTo begin with, I characterised the performance of the BLDC motor and propeller combination used on the drone. This data was used in the simulation, as well as to develop a linearization curve for the ESC control to improve the PID controller performance which are linear controllers.\nI used a modified version of the Madgwick filter library for Arduino to account for a variable update rate for the gyroscope, accelerometer and magnetometer sensor fusion to get the estimated attitude of the IMU. On top of that I also implemented coordinate transformations to account for the positioning of the IMU on the body. I implemented an integrator to estimate the velocity and position of the body, but without position updates from GPS or some other sensor, drift rendered the estimates unusable quickly.\nThe project I worked on relied heavily on the calibration procedures, which not only included basic calibrations for the IMU and magnetometer to remove the bias and hard iron offsets, but also data processing to identify some parameters regarding the positioning of the motors and IMU. In the data processing step I made use of the interquartile range to remove outliers from the average.\nI also implemented the remote controller logic and used BLE as the communication protocol. To pair with it, I also developed a companion app using Flutter and Dart. Not only did I get more practice with mobile development, I also learnt more about BLE communication and how to design the characteristics to reduce latency. A picture of the app and how it worked can be seen below.\nI translated the controller design originally designed in Simulink into a discrete controller implemented in Arduino. The control architecture for the attitude controller was cascaded, based on the PixHawk4 controller. The mixer was also similarly designed.\nFinally I also implemented additional safety features such as a battery monitor to not only determine if the battery was below a critical value, but also to estimate the motor output based on the battery voltage.\nI packaged all of this into the main program loop to handle the safety flags and when to run specific coroutines and the like.\nThe prototype was tested on a 1-DoF and 3-DoF rig to test the controller and tune the gains, before a flight test was performed which confirmed its ability to maintain its attitude in free flight, seen below.\nOverall the project allowed me to showcase a number of my skills I picked up from university such as dynamics, control theory and Simulink, CAD and 3D printing, as well as skills I learnt on my own time, such as mobile development and software development in general.\n","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/projects/fyp/","summary":"Unique Flight Controller for a Multirotor For my Final Year Project (FYP) for my Aerospace Engineering degree with NTU, I designed and built a novel UAV concept for drone based delivery. The prototype I built for the project was able to perform a short hover with attitude control. While I am unable to share the details of the design at the current moment as the research is still ongoing, I shall share the work I did for the project.","tags":null,"title":""},{"categories":null,"contents":"Handy Umbrella Dryer The Handy Umbrella Dryer was a product developed by my Engineering, Innovation and Design (EID) group for the module of the same name. It was a simple idea, but one with a potential that would see it outshine other more ambitious plans to emerge as a simple but well-received product at the showcase at the end of the module, seen in this picture of it and the team that designed it.\nOn its inception, the umbrella dryer was nothing more than a bottle to hold wet foldable umbrellas to ensure that their contents would not leak. The idea grew traction however, when we saw its potential to be something greater, a small piece of equipment that could be used to dry your umbrellas on the go, or in a hurry, incorporating a number of design features to increase its efficiency.\nThe final product consisted of a form fitting container, with a small fan unit and ventilation holes to increase convection and drying speed. On the base was a removeable sponge and cap, allowing excess water to be collected and removed when convenient. When turned on, it was able to adequately dry a wet folded umbrella in an hour.\n| While the project is now over, the HUD is admittedly incomplete. The initial plans involved placing a small heating element at the air intake at the top, further expediting drying process, as well as humidity and temperature sensors which could be combined with a micro-controller to adjust the drying rates or turn the device off when its job was finished to save power. If given the opportunity, I would like to add these features to our product.\n","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/projects/handyumbrelladryer/","summary":"Handy Umbrella Dryer The Handy Umbrella Dryer was a product developed by my Engineering, Innovation and Design (EID) group for the module of the same name. It was a simple idea, but one with a potential that would see it outshine other more ambitious plans to emerge as a simple but well-received product at the showcase at the end of the module, seen in this picture of it and the team that designed it.","tags":null,"title":""},{"categories":null,"contents":"HoverFish HoverFish, see it in action here!, was a buoyancy based remote controlled drone powered by a Raspberry Pi Zero W+. It was a helium balloon propelled by a distinctive tail, making it move like a fish in the air, hence the name.\nIn the summer of my first year at NTU, I enrolled in PS9888 Making and Tinkering, a special term module meant to provide students with the opportunity to solve open-ended real life problems. The module aims to allow students to pick up hands-on expertise in building something which put the knowledge they learnt from their disciplines to practical use.\nHaving just completed our first year at NTU, the amount of knowledge we had picked up in our respective disciplines may not have been much, but nevertheless we sought to build something ambitious. After much deliberation, we choose to build a balloon drone to explore another approach to flight, as opposed to the now ubiquitous quadcopters.\nWe began with a rough sizing of the drone as well as looking into the mobility of such a contraption by reverse engineering similar toys we discovered on the internet. To ensure our product\u0026rsquo;s uniqueness, we decided to modernize the concept, adding in a video feed to the drone as well as the ability to control it over local Wi-Fi networks.\nThe technical aspects I worked on in this project were\nconfiguring the raspberry Pi zero controller we used for our project to be accessible through the local Wi-Fi network, writing the python scripts used to communicate and actuate the servos on board the HoverFish, wiring the various electronic components together, designing the propulsive and buoyancy mechanisms, and testing the drone. Configuring the Raspberry Pi to connect to the local Wi-Fi network was the greatest challenge I faced in the project as setting up the Raspbian OS remotely, setting up the network options and getting past the security protocols on the school\u0026rsquo;s Wi-Fi involved performing a number of steps I still do not quite understand to this day. Nevertheless, with perseverance I was able to get the Raspberry Pi to be remotely accessible from any device connected to the same Wi-Fi network as it.\nThe scripts used to communicate with the HoverFish was split into two parts, one to send video feed from the HoverFish to the user and one for the user to send commands to the Hoverfish.\nThe first was a python script which would host a local page with the video feed from the Raspberry Pi camera. Fortunately, the base code to do so was available from the internet, giving me somewhere to start from. Using HTML and JavaScript, I added an overlay to the video feed, which allowed for a touch input system coupled with a backup keyboard input to send commands back to the HoverFish. The input from the user would send HTTPS requests to the Hoverfish which would then be received and translated to servo commands to control the two servo motors on-board the HoverFish. To allow the HoverFish to simultaneously send and receive HTTPS requests and control the servos, I made use of threads.\nThe propulsive and buoyancy mechanisms were the systems I am proudest of as they make use of mechanical principles to reduce the weight of the mechanisms, reduce the force required from the servo motors, overcoming two major constraints to our design while delivering the desired performance. The buoyancy mechanism made use of a concentrated load, namely the power supply, located away from the main body to shift the cg of the HoverFish, allowing it to tilt up and down. Combined with the thrust located at the back, this allowed the HoverFish to both climb and sink with a single degree of freedom for the propulsive system. The propulsive system was designed from biomimicry, taking inspiration from how a fish swims, hence the name HoverFish. By using a crescent shaped tail, we were able to reduce the drag on the tail, reducing the force required from the tail servo.\nMore details on the project timeline, development as well as videos of the HoverFish in action can be found at our project blog at https://blogs.ntu.edu.sg/ps9888-2018-hoverfish/.\n","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/projects/hoverfish/","summary":"HoverFish HoverFish, see it in action here!, was a buoyancy based remote controlled drone powered by a Raspberry Pi Zero W+. It was a helium balloon propelled by a distinctive tail, making it move like a fish in the air, hence the name.\nIn the summer of my first year at NTU, I enrolled in PS9888 Making and Tinkering, a special term module meant to provide students with the opportunity to solve open-ended real life problems.","tags":null,"title":""},{"categories":null,"contents":"Meal Diary Meal Diary is an app meant to help users keep track of their diet in order to assist them in eating healthier. It seeks to do so by simplifying the process of recording one\u0026rsquo;s meals, encouraging awareness over counting calories by making creating a new entry as easy as simply taking a picture of your meal.\nWhile this was not technically my first foray into app development for I had created a simple web app a number of years earlier, it was my first time writing an app specifically for android in Kotlin. The reason I had chosen to create the app was because I felt that the introduction of Kotlin and Android Studio made the app development process more accessible than before, and I thought that it was my turn to give it a shot.\nWhen I first started learning Kotlin, I picked up most of the basic skills from the tutorial by Google by building and experimenting with their introductory apps, incorporating the knowledge I gained from them into my own app. However, as my app grew more complex with more interactions and features, I had to cast my net wider and scour the internet or possible solutions to the difficulties I began to encounter. After much trial and error, I had finally managed to include the features I had desired to include.\nThe app makes use of intents to use the in-built camera app to take a photo, then uses the Google Places API to provide a location tag to the image, allowing location and time data to be stored. Each entry is stored locally on the user\u0026rsquo;s device, and collectively they are used to populate the RecyclerView used to display the entries. The result can be seen in the screenshot below.\nIf you are interested in trying this version of the app, please download the apk here. Please note that this version is not meant for commercial use and some features might be unavailable should the number of API requests be exceeded.\nDuring a recent NTU module, CY0006 Enterprise, Innovation and Leadership, my group and I are looking into the feasibility of such an app based on its desirability to actual users. In the process we gathered positive feedback and learnt more about the revenue and dependency costs of running an app. We are also looking into utilising the Google Vision API to provide more details on the pictures.\nThe project also brought back my interest in the project, and I decided to try out another mobile development tool I had recently discovered, Flutter. While I was originally drawn in by its ability to allow developers to develop apps for both Apple and Android from the same codebase, I found it much easier to develop widgets in Flutter as opposed to Kotlin. With the greater flexibility offered by Flutter widgets, I was able to make improvements in the UI, seen below.\nI also created a Google Play developer account to upload it to the Play store so I could share it. If you\u0026rsquo;re interested, you can join the internal testing here for a chance to download the app!\n","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/projects/mealdiary/","summary":"Meal Diary Meal Diary is an app meant to help users keep track of their diet in order to assist them in eating healthier. It seeks to do so by simplifying the process of recording one\u0026rsquo;s meals, encouraging awareness over counting calories by making creating a new entry as easy as simply taking a picture of your meal.\nWhile this was not technically my first foray into app development for I had created a simple web app a number of years earlier, it was my first time writing an app specifically for android in Kotlin.","tags":null,"title":""},{"categories":null,"contents":"Sound Site Sound Site is a single page React app built with React Flow. React was chosen to give the app interactivity, allowing users to \u0026ldquo;touch sound\u0026rdquo;, while React Flow was chosen as it was feature rich package, perfect for visualizing and controlling the Audio Graph.\nOne of the key features of Sound Site is the Analysis node, which allows users to see sound. This feature was built upon from an earlier attempt in which I was experimenting with the Web Audio API to see what it could do. I came back to upon discovering React Flow as I felt that I was ready to truly deliver on its promise.\n","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/projects/soundsite/","summary":"Sound Site Sound Site is a single page React app built with React Flow. React was chosen to give the app interactivity, allowing users to \u0026ldquo;touch sound\u0026rdquo;, while React Flow was chosen as it was feature rich package, perfect for visualizing and controlling the Audio Graph.\nOne of the key features of Sound Site is the Analysis node, which allows users to see sound. This feature was built upon from an earlier attempt in which I was experimenting with the Web Audio API to see what it could do.","tags":null,"title":""},{"categories":null,"contents":"Motion Based Multiple Object Tracking During the summer of my 3rd year, I did an internship with Temasek Laboratories at NUS. During my internship, I worked on developing an algorithm to detect and track mulitple moving objects in a scene, and return their 3D positions in real time.\nMy first task during the internship was to implement an algorithm tested in MATLAB into Python. To do so, I made use of the OpenCV library and got to know the functionality it provided in terms of image and video processing and methods for extracting useful information from images and videos. I also familiarsed myself with data visualization using a combination of OpenCV and the python plotting library matplotlib.\nThe results of each subsequent filter can be seen below, starting with the background subtraction mask on the bottom left, followed by the dilation operation in the top left, portions of the image to be ignored for processing in the top right and the detected objects in the bottom right.\nThe detections were tracked both temporally and spatially, making use of kalman filtering and k-nearest neighbours to ensure that continuous tracking. Optical flow was further used to identify any motions of the camera to distinguish between object and camera movement, allowing for panning motions to be transformed into a panoramic image, keeping the position of the drone fixed in absolute space. The visualized tracks with a panning motion in the video can be seen below, where the transition from green to red shows the time history of the track.\nFrom there, I also studied photogrammetry concepts such as the direct linear transform (DLT), epipolar geometry and triangulation to determine the 3D position of the 2D detections within the images from the cameras. We used a binocular setup to triangulate the 3D position of objects located within the field of view of both cameras. I also made use of the photogrammetry concepts I had learnt to implement an algorithm that would triangulate the position of any object detected by at least two cameras, regardless of their positions or orientations, so long as they were both able to see the object.\nI then worked on implementing the algorithm in real-time, which involved performing the detections on the video stream from multiple cameras, tracking each object, matching their detections from both cameras and performing the triangulation based on the position and pose of each camera containing the detection. The side-by-side tracks of the cameras, as well as the resultant tracks in 3D space can be seen below.\nAfter finishing up the on-site testing, I used the remainder of my time to apply the concepts I had learnt to a simulation to examine if I could apply the same principles to free agents instead of the binocular setup. Both were aware of their position in space and at least one other drone, alongside the camera parameters and detections of both. The simulation can be seen below, which worked rather well.\n","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/projects/spotit/","summary":"Motion Based Multiple Object Tracking During the summer of my 3rd year, I did an internship with Temasek Laboratories at NUS. During my internship, I worked on developing an algorithm to detect and track mulitple moving objects in a scene, and return their 3D positions in real time.\nMy first task during the internship was to implement an algorithm tested in MATLAB into Python. To do so, I made use of the OpenCV library and got to know the functionality it provided in terms of image and video processing and methods for extracting useful information from images and videos.","tags":null,"title":""},{"categories":null,"contents":"Virtual Face With the increased interest in VR and computer vision leading to a boom in popularity for face tracking applications and promising solutions, I decided to try my hand at it to figure out how such a solution might work.\nVirtual Face is a combination of a Computer Vision face and body tracking solution using Google\u0026rsquo;s MediaPipe library, and a renderer which makes use of the tracking data, built in Unity.\nI made use of the facial landmarks to determine the position and pose of the head, abstracting the required parameters for the renderer. The tracking program also starts a socket server such that applications can connect to it to request for the tracking data.\n","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/projects/virtualface/","summary":"Virtual Face With the increased interest in VR and computer vision leading to a boom in popularity for face tracking applications and promising solutions, I decided to try my hand at it to figure out how such a solution might work.\nVirtual Face is a combination of a Computer Vision face and body tracking solution using Google\u0026rsquo;s MediaPipe library, and a renderer which makes use of the tracking data, built in Unity.","tags":null,"title":""},{"categories":null,"contents":"CN Yang Executive Committee Voting Site In my second year of university, I was commissioned to develop an online voting system for the CN Yang Scholars Club, which would allow them to move away from physical ballots to an electronic voting system. The system was developed to cut down on the paper used for the physical ballots, as well as reduce the logistics involved. The electronic voting system would also allow year 3 and 4 scholars on their overseas exchange and final year projects to have a say.\nFor this project I made use of python and the flask package to generate the site and handle the HTTP requests. SQLalchemy was used for the database.\nTo limit each voter to one vote, a 5 letter case-sensitive one-time password was emailed to each voter, which was then deleted when it was used or replaced. I implemented a running key cipher in the python code to encode the used passwords, as well as a running key cipher in a VBA script, used by a moderating party to ensure all the votes were valid, while ensuring anonymity. In this way, all votes were accountable to a voter, but no one party would have both the voter\u0026rsquo;s one time password and their vote.\nOn the voting day, the source code was uploaded to GitHub and hosted as a Heroku app running a Postgres server.\nTestimonials The electronic voting system has improved the efficiency of our voting process significantly. It not only allowed us to tabulate the results within minutes, but also allowed voters who were overseas to participate in the elections via the easy to access portal. The encryption also ensures we are able to meet the same demands of accountability and anonymity as the traditional system. Most importantly for us, we wanted to reduce the amount of paper waste produced from printing over 200 traditional voting pamphlets. The system has already been handed down to the next batch of scholars in the committee and works amazingly.\nSowmya Srinivasan Iyer, Vice-President 11EC ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/projects/votingsite/","summary":"CN Yang Executive Committee Voting Site In my second year of university, I was commissioned to develop an online voting system for the CN Yang Scholars Club, which would allow them to move away from physical ballots to an electronic voting system. The system was developed to cut down on the paper used for the physical ballots, as well as reduce the logistics involved. The electronic voting system would also allow year 3 and 4 scholars on their overseas exchange and final year projects to have a say.","tags":null,"title":""},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://jiahe.dev/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"}]